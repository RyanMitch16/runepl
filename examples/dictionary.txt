

var Dictionary = func():(

	//The root of underlying the red black tree
	var root = null

	//Set up red and black constants
	var BLACK = 0
	var RED = 1

	/**
		Create a node for use in the tree.
	*/
	var __Node = func(key, value):(
	    var right, left, parent
	    var color = RED
	    return this
	)

	/**
		Insert an entry with the specified key and value into the dictionary.
		@param key - the key of the entry
		@param value - the value of the entry
	*/
	var insert = func(key, value):(
	    var newNode = __Node(key, value)

        if (root == null):
            root = newNode
            root.color = BLACK
            return

        var node = root
	    while (node != null):

	        if (key > node.key):
	            if (node.right != null):
	                node = node.right
	            else:
	                node.right = newNode
	                newNode.parent = node
	                __insertFixUp(newNode)
	                return
            else:
                if (node.left != null):
                    node = node.left
                else:
                    node.left = newNode
                    newNode.parent = node
                    __insertFixUp(newNode)
                    return
	)

	/**
		Get the value of the entry with the specified key.
		@param key - the key to get the value of
	*/
	var search = func(key):(

	    var node = root
	    while (node != null):
	        if (key == node.key):
	            return node.value
            if (key > node.key):
                if (node.right != null):
                    node = node.right
                else:
                    return null, -1
            else:
                if (node.left != null):
                    node = node.left
                else:
                    return null, -1

	)

    /**
    	Fixes up the RED BLACK tree after insertion.
    	@param z - the node to  begin fixing
    */
	var __insertFixUp = func(z):(

        while (z != root && z.parent.color == RED):
            
            if (z.parent == z.parent.parent.left):
            	var y = z.parent.parent.right
            	if (y!= null && y.color == RED):
            		z.parent.color = BLACK
            		y.color = BLACK
            		z.parent.parent.color = RED
            		z = z.parent.parent
        		else:
        			if (z == z.parent.right):
        				z = z.parent
        				__rotateLeft(z)
        			z.parent.color = BLACK
        			z.parent.parent.color = RED
        			__rotateRight(z.parent.parent)
        	else:

            	var y = z.parent.parent.left
            	if (y!= null && y.color == RED):
            		z.parent.color = BLACK
            		y.color = BLACK
            		z.parent.parent.color = RED
            		z = z.parent.parent
        		else:
        			if (z == z.parent.left):
        				z = z.parent
        				__rotateRight(z)
        			z.parent.color = BLACK
        			z.parent.parent.color = RED
        			__rotateLeft(z.parent.parent)

        root.color = BLACK
	)

	/**
		Rotate the the node to the left.
		@param x - the node to rotate to the left
	*/
	var __rotateLeft = func(x):(

		//Roate to the left
		var y = x.right
		x.right = y.left
		if (y.left != null):
			y.left.parent = x
		y.parent = x.parent

		if (x.parent == null):
			root = y
		else:
			if (x == x.parent.left):
				x.parent.left = y
			else:
				x.parent.right = y

		y.left = x
		x.parent = y
		return x
	)

	/**
		Rotate the the node to the right.
		@param x - the node to rotate to the right
	*/
	var __rotateRight = func(x):(

		//Roate to the left
		var y = x.left
		x.left = y.right
		if (y.right != null):
			y.right.parent = x
		y.parent = x.parent

		if (x.parent == null):
			root = y
		else:
			if (x == x.parent.right):
				x.parent.right = y
			else:
				x.parent.left = y

		y.right = x
		x.parent = y
		return x
	)

	var toString = func(): __toString(root, 0)

	var __toString = func(node, h):(

		var c = h * 4
		while (c > 0):
			print(" ")
			c -= 1

		print("Key: "+node.key+" Value:"+node.value+" Color: ")
		if (node.color == RED):
			print("RED")
		else:
			print("BLACK")
		println("")
		if (node.left != null):
			print("LEFT  : ")
			__toString(node.left, h+1)
		if (node.right != null):
			print("RIGHT : ")
			__toString(node.right, h+1)
	)

	return this
)

var d = Dictionary()
d.insert(2, "Mitchell")
d.toString()
d.insert(1, "Bernabe")
d.toString()
d.insert(3, "Stilson")
d.toString()
d.insert(4, "McDonald")
d.toString()
d.insert(5, "Wallace")
d.toString()
d.insert(6, "Lyons")
d.toString()
d.insert(7, "Cook")
d.toString()
d.insert(8, "Pizza")
d.toString()
//d.toString()

//println(d.search(6))


return 1